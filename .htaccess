RewriteEngine On

# ===================================================================
# SECURITY HEADERS
# ===================================================================

# Content Security Policy - Balanced protection with current code structure
# Note: unsafe-inline is temporary - plan to migrate to nonces in future
Header always set Content-Security-Policy "\
    default-src 'self'; \
    script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com https://www.googletagmanager.com https://connect.facebook.net https://www.facebook.com https://www.clarity.ms https://scripts.clarity.ms https://www.google-analytics.com https://analytics.google.com; \
    style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdnjs.cloudflare.com https://www.googletagmanager.com; \
    img-src 'self' data: https: blob:; \
    font-src 'self' https://fonts.gstatic.com https://cdnjs.cloudflare.com data:; \
    connect-src 'self' https://fonts.googleapis.com https://www.google-analytics.com https://analytics.google.com https://www.googletagmanager.com https://*.google-analytics.com https://www.facebook.com https://connect.facebook.net https://graph.facebook.com https://www.clarity.ms https://*.clarity.ms; \
    frame-src 'self' https://www.google.com https://maps.google.com https://maps.googleapis.com https://www.facebook.com; \
    frame-ancestors 'self'; \
    base-uri 'self'; \
    form-action 'self';\
"

# Prevent clickjacking attacks
Header always set X-Frame-Options "SAMEORIGIN"

# Prevent MIME-sniffing attacks
Header always set X-Content-Type-Options "nosniff"

# Enable XSS filter in older browsers (legacy support)
Header always set X-XSS-Protection "1; mode=block"

# Control information sent in Referer header
Header always set Referrer-Policy "strict-origin-when-cross-origin"

# Restrict browser features and APIs
Header always set Permissions-Policy "\
    geolocation=(), \
    microphone=(), \
    camera=(), \
    payment=(), \
    usb=(), \
    magnetometer=(), \
    gyroscope=(), \
    accelerometer=()\
"

# HSTS - Enforce HTTPS (uncomment after verifying HTTPS works correctly)
# IMPORTANT: Only enable after full HTTPS deployment and testing!
# Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

# Hide server information
ServerSignature Off
Header unset Server
Header always unset X-Powered-By

# ===================================================================
# END SECURITY HEADERS
# ===================================================================

# Enforce HTTPS (only on canonical hosts)
RewriteCond %{HTTPS} off
RewriteCond %{HTTP_HOST} ^(?:www\.)?toolshare\.com\.pl$ [NC]
RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]

# Enforce non-www (match canonical in HTML: toolshare.com.pl)
RewriteCond %{HTTP_HOST} ^www\.toolshare\.com\.pl$ [NC]
RewriteRule ^ https://toolshare.com.pl%{REQUEST_URI} [R=301,L]

# Canonical redirects to pretty URLs
# /index.html -> /
RewriteCond %{THE_REQUEST} \s/+index\.html\s [NC]
RewriteRule ^index\.html$ / [R=301,L,NE]

# Normalize .html/ -> .html (fix trailing slash after file extension)
RewriteCond %{REQUEST_URI} \.html/$ [NC]
RewriteRule ^(.+)\.html/$ /$1.html [R=301,L]

# Add trailing slash for real directories requested without slash
RewriteCond %{REQUEST_FILENAME} -d
RewriteRule ^(.+[^/])$ /$1/ [R=301,L]

# Avoid 403 on physical dir by redirecting section root to a landing category
RewriteRule ^narzedzia/?$ /narzedzia/elektronarzedzia/ [R=301,L]

# 301 from .html query to slug paths
# /category.html?category=Kategoria -> /narzedzia/slug(kategoria)
RewriteCond %{THE_REQUEST} \s/+category\.html [NC]
RewriteCond %{QUERY_STRING} (?:^|&)category=([^&]+) [NC]
RewriteRule ^category\.html$ /narzedzia/%1 [R=301,L,NE,QSD]

# /subcategory.html?category=Kategoria&subcategory=Podkategoria -> /narzedzia/slug(kategoria)/slug(podkategoria)
RewriteCond %{THE_REQUEST} \s/+subcategory\.html [NC]
RewriteCond %{QUERY_STRING} (?:^|&)category=([^&]+) [NC]
RewriteCond %{QUERY_STRING} (?:^|&)subcategory=([^&]+) [NC]
RewriteRule ^subcategory\.html$ /narzedzia/%1/%2 [R=301,L,NE,QSD]

# 1) Serve existing files/directories as-is
RewriteCond %{REQUEST_FILENAME} -f [OR]
RewriteCond %{REQUEST_FILENAME} -d
RewriteRule ^ - [L]

# 2) Home
RewriteRule ^$ index.html [L]

# 3) Pretty URLs → real pages with query params
# Normalize to trailing slash for virtual /narzedzia paths (non-physical)
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^narzedzia/(.+[^/])$ /narzedzia/$1/ [R=301,L]

# /narzedzia/kategoria → category.html
RewriteRule ^narzedzia/([^/]+)/?$ category.html?category=$1 [QSA,B,L]
# /narzedzia/kategoria/podkategoria → subcategory.html
RewriteRule ^narzedzia/([^/]+)/([^/]+)/?$ subcategory.html?category=$1&subcategory=$2 [QSA,B,L]
# /narzedzia/kategoria/podkategoria/narzedzie → tool.html
RewriteRule ^narzedzia/([^/]+)/([^/]+)/([^/]+)/?$ tool.html?toolId=$3 [QSA,B,L]

# Normalize mislinked legal/about pages nested under category paths
RewriteRule ^narzedzia/.*/(o-nas|polityka-prywatnosci|regulamin)\.html$ /$1.html [R=301,L]
