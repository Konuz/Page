{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Project Repository and Initial Structure",
        "description": "Initialize a new project repository with a basic structure for a static one-page website using HTML5, CSS3, and JavaScript (ES6+).",
        "details": "Create a new repository on GitHub or similar platform. Set up the following directory structure: /index.html, /css/style.css, /js/script.js, /images/. Initialize with a basic HTML5 template. Use modern tooling like Vite (v5.x) for fast development and hot reloading, or stick to vanilla JS if preferred. Add a .gitignore file to exclude node_modules and other unnecessary files.",
        "testStrategy": "Verify repository creation and directory structure. Test initial HTML template loads in browser.",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Design and Implement Responsive Layout",
        "description": "Design and implement a responsive layout for the one-page website, ensuring compatibility with mobile and desktop devices. The basic HTML structure and global CSS styles have been completed, including the page skeleton (header, sections, footer), global styles, color palette, and foundational responsiveness.",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "medium",
        "details": "Use CSS Grid and Flexbox for layout. Implement a mobile-first approach. Use media queries to adapt layout for different screen sizes. Choose a clean, modern sans-serif font (e.g., 'Inter', 'Roboto', or 'Open Sans'). Apply color scheme: beige/cream background, dark text, orange accents for buttons and highlights. Ensure all sections are visually distinct but cohesive. Use CSS variables for easy theme management. Build upon the existing foundation of the index.html skeleton and style.css global styles and responsiveness to enhance layout and visual polish.",
        "testStrategy": "Test layout on multiple devices and screen sizes using browser developer tools and real devices. Check for visual consistency, readability, and smooth responsiveness. Verify that the existing global styles and structure integrate well with new layout enhancements.",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Implement Hero Section with CTA",
        "description": "Create the Hero section with a catchy headline, brief description, and a call-to-action button that scrolls to the tools section.",
        "details": "Add a Hero section at the top of the page. Include a headline (e.g., 'Potrzebne narzędzia? Pożycz od sąsiada!'), a short description of the initiative, and a CTA button ('Zobacz dostępne narzędzia'). Style the background with a relevant image or illustration (tools, wood). Use JavaScript to implement smooth scrolling to the tools section when the CTA is clicked.",
        "testStrategy": "Verify Hero section displays correctly. Test CTA button scrolls smoothly to the tools section.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Build 'Why Us?' Section with Icon Tiles",
        "description": "Implement the 'Why Us?' section with four icon tiles, each highlighting a benefit of using the tool rental service.",
        "details": "Create a section with four tiles, each containing an icon and a short description: 'Szeroki Wybór', 'Dostępne Ceny', 'Wygodny Dostęp', 'Gwarancja Jakości'. Use SVG icons for scalability. Style tiles to match the color scheme. Ensure responsive behavior.",
        "testStrategy": "Check that all four tiles display correctly on all devices. Verify icons and text are legible and aligned.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Develop Tools Section with Dynamic Content",
        "description": "Implement the tools section, allowing easy addition/removal of tools via a simple JavaScript object array.",
        "details": "Create a tools section that displays a list of tools (initially: Wiertarka udarowa, Betoniarka, Piła ukośnica). Store tool data in a JavaScript array of objects in script.js (e.g., [{name: 'Wiertarka udarowa', description: '...', image: '...'}, ...]). Use JavaScript to dynamically render tools from this array. Ensure new tools can be added or removed by editing only this array, without changing HTML structure.",
        "testStrategy": "Verify tools are displayed from the array. Test adding/removing tools by editing the array and checking the page updates.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Define JavaScript Object Array for Tools",
            "description": "Create a JavaScript array where each element is an object representing a tool, including properties such as name, description, and any relevant metadata.",
            "dependencies": [],
            "details": "Ensure the array is structured for easy iteration and manipulation, following best practices for object arrays in JavaScript.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Render Tool List Dynamically",
            "description": "Implement logic to iterate over the tools array and generate corresponding DOM elements for each tool, displaying them on the page.",
            "dependencies": [
              1
            ],
            "details": "Use JavaScript to create and insert elements into the DOM based on the current state of the tools array.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Style Tool Cards",
            "description": "Apply CSS styles to the rendered tool elements to present them as visually distinct cards.",
            "dependencies": [
              2
            ],
            "details": "Ensure the cards are responsive and visually appealing, using classes or inline styles as appropriate.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement Add/Remove Logic",
            "description": "Add JavaScript functions to allow users to add new tools to the array and remove existing ones, updating the rendered list accordingly.",
            "dependencies": [
              2
            ],
            "details": "Ensure that the UI updates in real time as tools are added or removed from the array.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Test Dynamic Updates",
            "description": "Verify that adding and removing tools updates both the data array and the rendered UI correctly, and handle any edge cases.",
            "dependencies": [
              4
            ],
            "details": "Test with various scenarios, such as adding duplicate tools or removing all tools, to ensure robustness.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "Create Contact and Location Section",
        "description": "Implement the contact and location section with contact details and an interactive Google Maps embed.",
        "details": "Add a section with contact information (phone, email). Embed an interactive Google Maps iframe for location. Style to match the site's design. Ensure the map is responsive and loads efficiently.",
        "testStrategy": "Check contact details are correct and visible. Test Google Maps embed loads and is responsive on all devices.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Optimize Performance and Accessibility",
        "description": "Optimize the website for fast loading, accessibility, and cross-browser compatibility.",
        "details": "Optimize images (use WebP/AVIF formats). Implement lazy loading for images and iframes. Add alt text for images. Ensure color contrast meets accessibility standards. Test on multiple browsers (Chrome, Firefox, Safari, Edge). Use modern CSS and JS features with fallbacks for older browsers.",
        "testStrategy": "Test page load speed (Lighthouse). Check accessibility with tools like axe or WAVE. Verify cross-browser compatibility.",
        "priority": "medium",
        "dependencies": [
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Optimize Images Using WebP/AVIF",
            "description": "Convert existing images to modern formats like WebP and AVIF to reduce file size and improve loading speed without sacrificing quality.",
            "dependencies": [],
            "details": "Identify all images used on the site. Use tools or scripts to convert images to WebP and AVIF formats. Update image references in the code to use these optimized formats, leveraging the <picture> element and srcset for responsive delivery.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Lazy Loading for Images",
            "description": "Defer the loading of images that are not immediately visible in the viewport to improve initial page load performance.",
            "dependencies": [
              1
            ],
            "details": "Use the native loading=\"lazy\" attribute for images where supported, and implement a JavaScript-based lazy loading solution (e.g., using Intersection Observer API) for broader compatibility. Ensure all image tags are updated accordingly.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add Alt Text and ARIA Attributes",
            "description": "Ensure all images have descriptive alt text and add appropriate ARIA attributes to enhance accessibility for users with assistive technologies.",
            "dependencies": [
              1
            ],
            "details": "Review all image elements and provide meaningful alt text. For complex images or interactive elements, add ARIA roles and labels as needed to meet WCAG 2.1 accessibility standards.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Check Color Contrast and Accessibility",
            "description": "Evaluate the website's color contrast and overall accessibility to ensure compliance with accessibility guidelines.",
            "dependencies": [
              3
            ],
            "details": "Use tools like WAVE, aXe, or Lighthouse to audit color contrast ratios (minimum 4.5:1 for normal text) and other accessibility issues. Adjust CSS and markup as needed to resolve any identified problems.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Test Cross-Browser Compatibility",
            "description": "Verify that all optimizations and accessibility improvements work consistently across major browsers and devices.",
            "dependencies": [
              2,
              3,
              4
            ],
            "details": "Use tools such as BrowserStack or LambdaTest to test the site in Chrome, Firefox, Safari, Edge, and on mobile devices. Check for layout, image format support, and accessibility issues.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Add Fallbacks for Older Browsers",
            "description": "Implement fallback solutions for browsers that do not support modern image formats or lazy loading features.",
            "dependencies": [
              5
            ],
            "details": "Use the <picture> element to provide JPEG/PNG fallbacks for browsers that do not support WebP/AVIF. Add polyfills or alternative scripts for lazy loading and ARIA features where necessary. Test to ensure graceful degradation.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 8,
        "title": "Final Review, Testing, and Deployment",
        "description": "Conduct a final review, comprehensive testing, and deploy the website.",
        "details": "Review all sections for consistency and functionality. Test all interactive elements (smooth scrolling, tool display, contact info, map). Deploy to a static hosting service (e.g., Netlify, Vercel, GitHub Pages). Ensure the site is publicly accessible and all links work.",
        "testStrategy": "Perform end-to-end testing on all devices. Check deployment and public accessibility. Verify all requirements from the PRD are met.",
        "priority": "high",
        "dependencies": [
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ],
        "status": "cancelled",
        "subtasks": [
          {
            "id": 1,
            "title": "Review All Sections for Consistency",
            "description": "Examine every section of the project to ensure content, design, and functionality are consistent throughout. Identify and document any discrepancies or areas needing alignment.",
            "dependencies": [],
            "details": "Check for uniformity in terminology, formatting, navigation, and visual elements. Confirm that all sections adhere to project guidelines and standards.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Test All Interactive Elements",
            "description": "Manually and/or automatically test all buttons, forms, links, and other interactive components to verify correct behavior and responsiveness.",
            "dependencies": [
              1
            ],
            "details": "Ensure that all user interactions trigger the expected outcomes. Document any bugs or usability issues for resolution.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Perform End-to-End Device/Browser Testing",
            "description": "Conduct comprehensive end-to-end tests across multiple devices and browsers to validate the complete user experience and system integration.",
            "dependencies": [
              2
            ],
            "details": "Use automated frameworks (e.g., Selenium, Cypress) and manual testing to simulate real user scenarios, ensuring compatibility and identifying cross-platform issues.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Deploy to Chosen Hosting Platform",
            "description": "Deploy the thoroughly tested project to the selected hosting environment, following best practices for configuration and security.",
            "dependencies": [
              3
            ],
            "details": "Prepare deployment artifacts, configure environment variables, and execute the deployment process. Monitor for deployment errors.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Verify Public Accessibility and Requirements",
            "description": "Confirm that the deployed project is publicly accessible and meets all specified requirements, including performance, security, and compliance.",
            "dependencies": [
              4
            ],
            "details": "Test access from different networks and devices, validate that all features function as intended, and ensure compliance with project specifications.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 9,
        "title": "Refactor 'Our Tools' Section into Multi-Level Categorized Catalog",
        "description": "Transform the existing flat tools list into a hierarchical, multi-page catalog with categories, subcategories, and tool detail pages, updating navigation and data structures accordingly.",
        "details": "1. Redesign the tools data structure in script.js to support a hierarchy: categories, subcategories, and tools. Example structure: [{ category: 'Elektronarzędzia...', subcategories: [{ name: 'Wkrętarki', tools: [...] }, ...] }, ...].\n2. Replace the single tools section with a homepage view that displays main categories as clickable cards or links.\n3. For each category, create a dedicated page (or dynamic view if using client-side routing) listing its subcategories. Each subcategory should link to its own page displaying the relevant tools.\n4. Update the navigation bar: convert the 'Narzędzia' link into a dropdown menu listing all main categories. Ensure dropdown is accessible and works on mobile (consider touch and keyboard navigation best practices[1][5]).\n5. Implement client-side routing (using hash-based or history API) or generate separate HTML files for each category/subcategory page, ensuring smooth navigation and back/forward browser support.\n6. Ensure all new pages and navigation elements are fully responsive and visually consistent with the existing theme.\n7. Refactor and modularize JavaScript to handle rendering of categories, subcategories, and tool lists dynamically based on the new data structure.\n8. Update any smooth scrolling or CTA logic to accommodate the new multi-page/catalog structure.",
        "testStrategy": "- Verify that the homepage displays all main categories as intended.\n- Test navigation: clicking a category in the navbar dropdown or homepage leads to the correct category page; clicking a subcategory leads to the correct tool list.\n- Confirm that the navigation dropdown is accessible and usable on both desktop and mobile devices.\n- Check that the new data structure in script.js correctly renders all categories, subcategories, and tools, and that adding/removing items updates the UI without manual HTML changes.\n- Ensure all new pages/views are fully responsive and match the site's design.\n- Test browser navigation (back/forward) and direct linking to category/subcategory pages.\n- Validate that all interactive elements (dropdown, links) work as expected across devices and browsers.",
        "status": "in-progress",
        "dependencies": [
          2,
          5
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Analyze Current 'Our Tools' Section and Data Structure",
            "description": "Review the existing implementation of the 'Our Tools' section, including its data structure, UI, and navigation logic.",
            "dependencies": [],
            "details": "Document current data models, UI components, and navigation flows to identify areas requiring change.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Redesign Data Structure for Hierarchical Organization",
            "description": "Create a new data model that supports categories and subcategories for tools, enabling hierarchical representation.",
            "dependencies": [
              1
            ],
            "details": "Define JSON or object schema to represent categories, subcategories, and tools, ensuring scalability and clarity.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement Category and Subcategory Views",
            "description": "Develop UI components to display tools grouped by category and subcategory, supporting dynamic rendering based on the new data structure.",
            "dependencies": [
              2
            ],
            "details": "Ensure components can render nested categories and allow users to drill down into subcategories.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Update Navigation Logic for Hierarchical Browsing",
            "description": "Refactor navigation to support hierarchical browsing through categories and subcategories, including breadcrumbs or similar aids.",
            "dependencies": [
              3
            ],
            "details": "Ensure users can easily navigate between levels and return to previous views.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Enhance Accessibility and Mobile Navigation Support",
            "description": "Update navigation and UI components to meet accessibility standards (ARIA, keyboard navigation) and optimize for mobile devices.",
            "dependencies": [
              4
            ],
            "details": "Test with screen readers and on various device sizes to ensure usability for all users.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Integrate Client-Side Routing or Multi-Page Generation",
            "description": "Implement client-side routing (e.g., React Router) or static multi-page generation to enable deep linking and browser navigation for categories and tools.",
            "dependencies": [
              5
            ],
            "details": "Ensure URLs reflect the current view and support direct access/bookmarking.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Ensure Responsive Design for All Views",
            "description": "Apply responsive design principles to all components, ensuring the 'Our Tools' section works seamlessly across devices and screen sizes.",
            "dependencies": [],
            "details": "Use CSS media queries and flexible layouts to adapt to different resolutions.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "Modularize JavaScript for Dynamic Rendering",
            "description": "Refactor JavaScript code into modular components/functions to handle dynamic rendering of hierarchical data and navigation.",
            "dependencies": [],
            "details": "Promote code reuse, maintainability, and separation of concerns.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 9,
            "title": "Update Smooth Scrolling and CTA Logic",
            "description": "Refactor smooth scrolling and call-to-action (CTA) logic to work with the new hierarchical structure and navigation.",
            "dependencies": [],
            "details": "Ensure smooth transitions and correct CTA targeting across all navigation paths.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 10,
            "title": "Comprehensive Testing for Navigation, Responsiveness, and Data-Driven UI",
            "description": "Develop and execute tests covering navigation flows, responsive layouts, accessibility, and dynamic UI updates based on data changes.",
            "dependencies": [],
            "details": "Include unit, integration, and end-to-end tests; involve QA team for thorough validation.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "Implement SEO Improvements",
        "description": "Implement key SEO improvements to increase the website's visibility in search results. The main areas for improvement are meta tags, structured data (Schema.org), and optimizing subpage titles.",
        "status": "pending",
        "dependencies": [
          7,
          9
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Meta Tags (Descriptions)",
            "description": "Add a static meta 'description' tag to the main page (index.html) and implement dynamic generation of meta descriptions for category, subcategory, and tool pages in the script.js file.",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 10
          },
          {
            "id": 2,
            "title": "Implement Structured Data (Schema.org)",
            "description": "Implement Schema.org structured data to help search engines better understand the page content and enable rich snippets. The main schemas to implement are LocalBusiness, Product, and BreadcrumbList.",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 10
          },
          {
            "id": 3,
            "title": "Optimize Subpage Titles",
            "description": "Implement dynamic generation of the <title> tag for subpages (categories, tools) to make them more descriptive and SEO-friendly, e.g., 'Tool Name - ToolShare Rentals'.",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 10
          },
          {
            "id": 4,
            "title": "Add LocalBusiness Schema",
            "description": "Add a JSON-LD script with the LocalBusiness schema to all pages, including key business information: name, address, phone, opening hours, and logo.",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 10
          },
          {
            "id": 5,
            "title": "Add Product Schema for Tools",
            "description": "On the tool details page (tool.html), dynamically generate a JSON-LD script with the Product schema, including the tool's name, description, image, and price offers.",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 10
          },
          {
            "id": 6,
            "title": "Add BreadcrumbList Schema for Navigation",
            "description": "Implement dynamic generation of a JSON-LD script with the BreadcrumbList schema on subpages to reflect the navigation structure and improve its visibility in Google.",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 10
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-02T19:49:42.142Z",
      "updated": "2025-07-10T22:51:45.199Z",
      "description": "Tasks for master context"
    }
  }
}